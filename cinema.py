import pandas as pd
import sqlite3
import time
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from together import Together
from fuzzywuzzy import fuzz
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV
movies_df = pd.read_csv('kinopoisk-top250.csv')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Together AI
together_client = Together(api_key="814aaa3d65cd5cd6dedbab7f8685889419ad93285155ae2d7c1a94869343faa4")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API-–∫–ª—é—á

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect('dialog_history.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS history
                 (user_id INTEGER, query TEXT, response TEXT, timestamp TEXT)''')
    conn.commit()
    conn.close()

init_db()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Retriever)
def retrieve_cinema_data(query, top_k=3):
    query = query.lower()
    results = []
    
    # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º fuzzy matching
    for idx, row in movies_df.iterrows():
        score = max(
            fuzz.partial_ratio(query, row['movie'].lower()),
            fuzz.partial_ratio(query, row['overview'].lower()),
            fuzz.partial_ratio(query, row['director'].lower()),
            fuzz.partial_ratio(query, row['actors'].lower())
        )
        if score > 50:  # –ü–æ—Ä–æ–≥ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            results.append((score, row))
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ top_k
    results = sorted(results, key=lambda x: x[0], reverse=True)[:top_k]
    return [row.to_dict() for score, row in results]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ (Generator)
def generate_response(query):
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    relevant_data = retrieve_cinema_data(query)
    
    if not relevant_data:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∏–º—è —Ä–µ–∂–∏—Å—Å—ë—Ä–∞, –∞–∫—Ç—ë—Ä–∞ –∏–ª–∏ –∂–∞–Ω—Ä."
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è LLM
    context = "–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
    for item in relevant_data:
        context += f"- –§–∏–ª—å–º: {item['movie']} ({item['year']}, {item['country']}, —Ä–µ–π—Ç–∏–Ω–≥: {item['rating']})\n"
        context += f"  –û–ø–∏—Å–∞–Ω–∏–µ: {item['overview']}\n"
        context += f"  –†–µ–∂–∏—Å—Å—ë—Ä: {item['director']}\n"
        context += f"  –ê–∫—Ç—ë—Ä—ã: {item['actors']}\n"
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Together AI
    prompt = f"""
    –¢—ã –±–æ—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: "{query}".
    –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:
    {context}
    –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω, –ø—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–æ—á–Ω–∏—Ç—å.
    """
    
    try:
        response = together_client.chat.completions.create(
            model="meta-llama/Llama-3-8b-chat-hf",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=200
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Together AI: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°–ø—Ä–∞–≤–∫–∞", callback_data='help')],
        [InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è", callback_data='history')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üé¨ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–∞—Ö, —Ä–µ–∂–∏—Å—Å—ë—Ä–∞—Ö, –∞–∫—Ç—ë—Ä–∞—Ö –∏ –∂–∞–Ω—Ä–∞—Ö. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã —Å–Ω—è–ª –ù–æ–ª–∞–Ω?'",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
    üé¨ –Ø –±–æ—Ç –ø–æ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏–∏! –ú–æ–≥—É:
    - –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ñ–∏–ª—å–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–†–∞—Å—Å–∫–∞–∂–∏ –æ '–ù–∞—á–∞–ª–æ'").
    - –î–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏—Å—Å—ë—Ä–∞—Ö –∏–ª–∏ –∞–∫—Ç—ë—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–§–∏–ª—å–º—ã —Å –¢–æ–º–æ–º –•—ç–Ω–∫—Å–æ–º").
    - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤ (/history).
    - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é (/clear_history).
    –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É!
    """
    await update.message.reply_text(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.message.text
    start_time = time.time()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    response = generate_response(query)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    conn = sqlite3.connect('dialog_history.db')
    c = conn.cursor()
    c.execute("INSERT INTO history (user_id, query, response, timestamp) VALUES (?, ?, ?, ?)",
              (user_id, query, response, time.strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    await update.message.reply_text(response)

    # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    logger.info(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫—É–Ω–¥")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history
async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('dialog_history.db')
    c = conn.cursor()
    c.execute("SELECT query, response, timestamp FROM history WHERE user_id = ? ORDER BY timestamp DESC LIMIT 10", (user_id,))
    rows = c.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    history_text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
    for query, response, timestamp in rows:
        history_text += f"üïí {timestamp}\nüó£ –ó–∞–ø—Ä–æ—Å: {query}\nüì¢ –û—Ç–≤–µ—Ç: {response}\n\n"
    await update.message.reply_text(history_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_history
async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('dialog_history.db')
    c = conn.cursor()
    c.execute("DELETE FROM history WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'help':
        await help_command(query, context)
    elif query.data == 'history':
        await history(query, context)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = Application.builder().token('7747105680:AAGmi7ImvNXxC_qy5KAwPfSm2VYOBxp8sJw').build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("history", history))
    application.add_handler(CommandHandler("clear_history", clear_history))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button))

    application.run_polling()

if __name__ == '__main__':
    main()